// Oyun durumu
let gameState = {
    gold: 100,
    health: 100,
    maxHealth: 100,
    score: 0,
    playerCards: [],
    botCards: [],
    playerBattleCards: [],
    botBattleCards: [],
    playerSpellCards: [],
    botSpellCards: [],
    battleInProgress: false,
    spellPhase: false,
    spellTimer: 0,
    targetingMode: false,
    selectedSpell: null,
    gameStarted: false
};

// Ayarlar
let settings = {
    soundEnabled: true,
    animationSpeed: 1,
    theme: 'default'
};

// Performans kontrol√º
let animationFrameId = null;
let isAnimating = false;

// SADECE GER√áEK G√ñRSELƒ∞ OLAN KARTLAR - PNG DOSYALARINA G√ñRE
const unitCards = [
    { 
        name: 'Antik Golem', 
        type: 'üóø', 
        attack: 15, 
        defense: 35, 
        icon: 'üóø', 
        image: 'antik_golem.png',
        description: 'Antik g√º√ßlerle korunur', 
        cssClass: 'golem-type' 
    },
    { 
        name: 'Ate≈ü Lordu', 
        type: 'üî•', 
        attack: 40, 
        defense: 12, 
        icon: 'üî•', 
        image: 'ates_lordu.png',
        description: 'Alev b√ºy√ºleri ustasƒ±', 
        cssClass: 'fire-type' 
    },
    { 
        name: 'Ejder Sava≈ü√ßƒ±', 
        type: 'üê≤', 
        attack: 35, 
        defense: 22, 
        icon: 'üê≤', 
        image: 'ejder_savasci.png',
        description: 'Ejder g√ºc√ºyle sava≈üƒ±r', 
        cssClass: 'dragon-type' 
    },
    { 
        name: 'Elf B√ºy√ºc√º', 
        type: 'üßö', 
        attack: 25, 
        defense: 18, 
        icon: 'üßù‚Äç‚ôÇÔ∏è', 
        image: 'elf_buyucu.png',
        description: 'Doƒüa b√ºy√ºleri yapar', 
        cssClass: 'elf-type' 
    },
    { 
        name: 'Kristal Koruyucu', 
        type: 'üíé', 
        attack: 20, 
        defense: 30, 
        icon: 'üíé', 
        image: 'kristal_koruyucu.png',
        description: 'Kristal kalkanla korunur', 
        cssClass: 'crystal-type' 
    },
    { 
        name: 'Elit Ok√ßu', 
        type: 'üèπ', 
        attack: 30, 
        defense: 15, 
        icon: 'üèπ', 
        image: 'okcu.png',
        description: 'M√ºkemmel ni≈üancƒ±', 
        cssClass: 'archer-type' 
    },
    { 
        name: 'Org ≈ûampiyon', 
        type: '‚öîÔ∏è', 
        attack: 38, 
        defense: 20, 
        icon: 'üëπ', 
        image: 'org_sampiyon.png',
        description: 'Org kabilesinin lideri', 
        cssClass: 'orc-type' 
    }
];

// B√úY√ú KARTLARI
const spellCards = [
    {
        name: 'B√ºy√º Asasƒ±',
        type: 'üîÆ',
        spellType: 'damage',
        spellValue: 10,
        icon: 'üîÆ',
        image: 'BuyuAsasi.png',
        description: 'Se√ßtiƒüin d√º≈ümana 10 hasar verir',
        cssClass: 'spell-type',
        isSpell: true
    }
];

// DOM elementleri
const mainMenu = document.getElementById('mainMenu');
const gameArea = document.getElementById('gameArea');
const goldElement = document.getElementById('gold');
const healthElement = document.getElementById('health');
const scoreElement = document.getElementById('score');
const healthBar = document.getElementById('healthBar');
const playerCardsContainer = document.getElementById('playerCards');
const botCardsContainer = document.getElementById('botCards');
const playerBattleCardsContainer = document.getElementById('playerBattleCards');
const botBattleCardsContainer = document.getElementById('botBattleCards');
const playerSpellCardsContainer = document.getElementById('playerSpellCards');
const botSpellCardsContainer = document.getElementById('botSpellCards');
const useSpellBtn = document.getElementById('useSpellBtn');
const battleBtn = document.getElementById('battleBtn');
const buyCardBtn = document.getElementById('buyCardBtn');
const arena = document.getElementById('arena');
const logContent = document.getElementById('logContent');
const gameOverPopup = document.getElementById('gameOverPopup');

// Men√º eventleri
document.addEventListener('DOMContentLoaded', () => {
    setupMenuEvents();
    setupGameEvents();
    loadSettings();
});

// Men√º event'lerini kur
function setupMenuEvents() {
    // Ana men√º butonlarƒ±
    document.getElementById('startGameBtn').addEventListener('click', startNewGame);
    document.getElementById('howToPlayBtn').addEventListener('click', showHowToPlay);
    document.getElementById('settingsBtn').addEventListener('click', showSettings);
    
    // Modal kapatma
    document.getElementById('closeHowToPlay').addEventListener('click', closeHowToPlay);
    document.getElementById('closeSettings').addEventListener('click', closeSettings);
    
    // √úst bar butonlarƒ±
    document.getElementById('pauseBtn').addEventListener('click', pauseGame);
    document.getElementById('menuBtn').addEventListener('click', showMainMenu);
    
    // Resume butonu
    document.getElementById('resumeBtn').addEventListener('click', resumeGame);
    
    // Ayarlar
    document.getElementById('soundToggle').addEventListener('change', updateSoundSetting);
    document.getElementById('animationSpeed').addEventListener('input', updateAnimationSpeed);
    document.getElementById('themeSelect').addEventListener('change', updateTheme);
    
    // Modal dƒ±≈üƒ±na tƒ±klama ile kapatma
    window.addEventListener('click', (e) => {
        const modals = document.querySelectorAll('.modal');
        modals.forEach(modal => {
            if (e.target === modal) {
                modal.style.display = 'none';
            }
        });
    });
    
    // ESC tu≈üu ile hedef se√ßimi iptal etme
    window.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && gameState.targetingMode) {
            cancelTargeting();
        }
    });
}

// Oyun event'lerini kur
function setupGameEvents() {
    // Arena drop zone
    arena.addEventListener('dragover', (e) => {
        e.preventDefault();
        
        // B√úY√ú A≈ûAMASI Sƒ∞RASƒ∞NDA FARKLI G√ñRSEL FEEDBACK
        if (gameState.spellPhase) {
            arena.classList.add('spell-phase-drag');
            arena.classList.remove('drag-over');
        } else {
            arena.classList.add('drag-over');
            arena.classList.remove('spell-phase-drag');
        }
    });
    
    arena.addEventListener('dragleave', () => {
        arena.classList.remove('drag-over', 'spell-phase-drag');
    });
    
    arena.addEventListener('drop', (e) => {
        e.preventDefault();
        arena.classList.remove('drag-over', 'spell-phase-drag');
        
        // Hedef se√ßim modundaysa drag&drop engelle
        if (gameState.targetingMode) {
            addLog('‚ùå √ñnce hedef se√ßimini tamamlayƒ±n!', 'error');
            return;
        }
        
        const cardId = e.dataTransfer.getData('text/plain');
        console.log('üéØ KART S√úR√úKLENDI:', cardId);
        
        // YENƒ∞ RANDOMƒ∞ZE Sƒ∞STEMƒ∞ KULLAN
        handlePlayerCardDrop(cardId);
    });
    
    // B√ºy√º butonu event listener
    if (useSpellBtn) {
        useSpellBtn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            console.log('B√ºy√º butonu tƒ±klandƒ±! Spell phase:', gameState.spellPhase, 'Battle progress:', gameState.battleInProgress);
            addLog('üîÆ B√ºy√º butonu tƒ±klandƒ±!', 'info');
            
            if (!gameState.spellPhase) {
                addLog('‚ùå B√ºy√º a≈üamasƒ± deƒüil!', 'error');
                return;
            }
            
            if (gameState.battleInProgress) {
                addLog('‚ùå Sava≈ü ortasƒ±nda b√ºy√º kullanƒ±lamaz!', 'error');
                return;
            }
            
            if (gameState.targetingMode) {
                addLog('‚ùå Zaten hedef se√ßim modundasiniz! Bot kartƒ±na tƒ±klayƒ±n!', 'error');
                return;
            }
            
            if (gameState.playerSpellCards.length > 0) {
                const spell = gameState.playerSpellCards[0];
                addLog(`üîÆ ${spell.name} kullanƒ±lƒ±yor!`, 'info');
                useSpellSafely(spell);
            } else {
                addLog('‚ùå B√ºy√º kartƒ± yok!', 'error');
            }
        });
    }
    
    // Sava≈ü butonu
    battleBtn.addEventListener('click', handleBattleButtonClick);
    
    // Kart satƒ±n alma
    buyCardBtn.addEventListener('click', buyCard);
}

// Battle butonu click handler
function handleBattleButtonClick() {
    // Hedef se√ßim modundaysa i≈ülem yapma
    if (gameState.targetingMode) {
        return;
    }
    
    if (gameState.spellPhase) {
        // B√ºy√º a≈üamasƒ±ndaysa, b√ºy√º a≈üamasƒ±nƒ± bitir
        endSpellPhase();
    } else {
        // Normal sava≈ü ba≈ülatma
        startBattle();
    }
}

// Yeni oyun ba≈ülat
function startNewGame() {
    hideMainMenu();
    initGame();
    playSound('gameStart');
}

// Ana men√ºy√º g√∂ster
function showMainMenu() {
    gameState.gameStarted = false;
    mainMenu.style.display = 'flex';
    gameArea.style.display = 'none';
    document.getElementById('pauseModal').style.display = 'none';
}

// Ana men√ºy√º gizle
function hideMainMenu() {
    mainMenu.style.display = 'none';
    gameArea.style.display = 'block';
    gameState.gameStarted = true;
}

// Modal fonksiyonlarƒ±
function showHowToPlay() {
    document.getElementById('howToPlayModal').style.display = 'flex';
}

function closeHowToPlay() {
    document.getElementById('howToPlayModal').style.display = 'none';
}

function showSettings() {
    document.getElementById('settingsModal').style.display = 'flex';
}

function closeSettings() {
    document.getElementById('settingsModal').style.display = 'none';
    saveSettings();
}

function pauseGame() {
    if (gameState.gameStarted && !gameState.battleInProgress) {
        document.getElementById('pauseModal').style.display = 'flex';
    }
}

function resumeGame() {
    document.getElementById('pauseModal').style.display = 'none';
}

// Ayarlar
function updateSoundSetting() {
    settings.soundEnabled = document.getElementById('soundToggle').checked;
}

function updateAnimationSpeed() {
    settings.animationSpeed = parseFloat(document.getElementById('animationSpeed').value);
    document.documentElement.style.setProperty('--animation-speed', settings.animationSpeed);
}

function updateTheme() {
    settings.theme = document.getElementById('themeSelect').value;
    applyTheme(settings.theme);
}

function applyTheme(theme) {
    document.body.classList.remove('theme-default', 'theme-dark', 'theme-neon');
    document.body.classList.add(`theme-${theme}`);
}

function saveSettings() {
    console.log('Settings would be saved:', settings);
}

function loadSettings() {
    console.log('Settings loaded from defaults');
}

// Optimize edilmi≈ü ses efektleri
function playSound(type) {
    if (!settings.soundEnabled) return;
    
    try {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        switch(type) {
            case 'cardPlace':
                oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
                gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
                break;
            case 'battle':
                oscillator.frequency.setValueAtTime(400, audioContext.currentTime);
                oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.1);
                gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
                break;
            case 'win':
                oscillator.frequency.setValueAtTime(523, audioContext.currentTime);
                oscillator.frequency.setValueAtTime(659, audioContext.currentTime + 0.1);
                oscillator.frequency.setValueAtTime(783, audioContext.currentTime + 0.2);
                gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
                break;
            case 'lose':
                oscillator.frequency.setValueAtTime(300, audioContext.currentTime);
                oscillator.frequency.setValueAtTime(200, audioContext.currentTime + 0.2);
                gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.4);
                break;
            case 'gameStart':
                oscillator.frequency.setValueAtTime(440, audioContext.currentTime);
                oscillator.frequency.setValueAtTime(554, audioContext.currentTime + 0.2);
                oscillator.frequency.setValueAtTime(659, audioContext.currentTime + 0.4);
                gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.6);
                break;
        }
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.6);
    } catch (e) {
        console.log('Audio context not available');
    }
}

// Oyunu ba≈ülat
function initGame() {
    // Oyun durumunu sƒ±fƒ±rla
    gameState = {
        gold: 100,
        health: 100,
        maxHealth: 100,
        score: 0,
        playerCards: [],
        botCards: [],
        playerBattleCards: [],
        botBattleCards: [],
        playerSpellCards: [],
        botSpellCards: [],
        battleInProgress: false,
        spellPhase: false,
        spellTimer: 0,
        targetingMode: false,
        selectedSpell: null,
        gameStarted: true
    };
    
    // Ba≈ülangƒ±√ß kartlarƒ± - her seferinde farklƒ± kartlar (3'l√º sava≈ü i√ßin daha fazla)
    for (let i = 0; i < 6; i++) {
        gameState.playerCards.push(createRandomCard());
        gameState.botCards.push(createRandomCard());
    }
    
    updateUI();
    logContent.innerHTML = '';
    addLog('üéÆ Oyun ba≈üladƒ±!', 'info');
    addLog('üìã STRATEJƒ∞: ƒ∞lk √∂nce 3 birim + 1 b√ºy√º kartƒ±nƒ± arena alanƒ±na hazƒ±rla!', 'info');
    addLog('‚ö° Sonra sava≈ü sƒ±rasƒ±nda b√ºy√º kullanƒ±p kullanmama kararƒ±nƒ± vereceksin!', 'win');
}

// Rastgele birim kartƒ± olu≈ütur - TAM DERƒ∞N KOPYA Sƒ∞STEMƒ∞
function createRandomUnitCard() {
    const cardType = unitCards[Math.floor(Math.random() * unitCards.length)];
    
    // SABƒ∞T CAN Sƒ∞STEMƒ∞ - Her kart t√ºr√ºn√ºn canƒ± sabit!
    const baseHealth = cardType.defense; // Sadece defense deƒüeri = can
    
    // TAM DERƒ∞N KOPYA - HER KART TAMAMEN AYRI OBJE!
    const newCard = {
        id: Math.random().toString(36).substr(2, 9) + Date.now(), // DAHA G√úVENLƒ∞ ID
        name: cardType.name + '', // String kopyala
        type: cardType.type + '', // String kopyala 
        attack: Number(cardType.attack), // Sayƒ± kopyala
        defense: Number(cardType.defense), // Sayƒ± kopyala
        icon: cardType.icon + '', // String kopyala
        image: cardType.image + '', // String kopyala
        description: cardType.description + '', // String kopyala
        cssClass: cardType.cssClass + '', // String kopyala
        currentHealth: Number(baseHealth), // Sayƒ± kopyala - SABƒ∞T CAN
        maxHealth: Number(baseHealth),     // Sayƒ± kopyala - SABƒ∞T CAN
        isSpell: false,
        _created: Date.now() // Benzersizlik i√ßin
    };
    
    console.log('YENƒ∞ KART OLU≈ûTURULDU (TAM DERƒ∞N KOPYA):', newCard.name, 'ID:', newCard.id, 'CAN:', newCard.currentHealth, 'Created:', newCard._created);
    
    return newCard;
}

// Rastgele b√ºy√º kartƒ± olu≈ütur
function createRandomSpellCard() {
    const spellType = spellCards[Math.floor(Math.random() * spellCards.length)];
    
    // DERƒ∞N KOPYA - B√ºy√º kartlarƒ± i√ßin de!
    const newSpell = {
        id: Math.random().toString(36).substr(2, 9), // Benzersiz ID
        name: spellType.name,
        type: spellType.type,
        spellType: spellType.spellType,
        spellValue: spellType.spellValue,
        icon: spellType.icon,
        image: spellType.image,
        description: spellType.description,
        cssClass: spellType.cssClass,
        isSpell: true
    };
    
    console.log('YENƒ∞ B√úY√ú KARTI OLU≈ûTURULDU:', newSpell.name, 'ID:', newSpell.id);
    return newSpell;
}

// Genel rastgele kart olu≈ütur (70% birim, 30% b√ºy√º)
function createRandomCard() {
    return Math.random() < 0.7 ? createRandomUnitCard() : createRandomSpellCard();
}

// Optimize edilmi≈ü UI g√ºncelleme
function updateUI() {
    // Performans i√ßin requestAnimationFrame kullan
    if (animationFrameId) {
        cancelAnimationFrame(animationFrameId);
    }
    
    animationFrameId = requestAnimationFrame(() => {
        goldElement.textContent = gameState.gold;
        healthElement.textContent = gameState.health;
        scoreElement.textContent = gameState.score;
        
        // Can barƒ±nƒ± g√ºncelle
        const healthPercentage = (gameState.health / gameState.maxHealth) * 100;
        if (healthBar) {
            healthBar.style.width = `${healthPercentage}%`;
        }
        
        renderCards(gameState.playerCards, playerCardsContainer, true);
        renderCards(gameState.botCards, botCardsContainer, false);
        renderBotCardsWithTargeting();
        renderBattleCards();
        renderSpellCards(); // TEK FONKSƒ∞YON KULLAN
        
        // Buton durumlarƒ±
        if (gameState.targetingMode) {
            battleBtn.textContent = `HEDEF SE√áƒ∞N: ${gameState.selectedSpell.name}`;
            battleBtn.disabled = true;
        } else if (gameState.spellPhase) {
            battleBtn.textContent = `B√úY√ú KULLAN VEYA SAVA≈ûI BA≈ûLAT! (${gameState.spellTimer}s)`;
            battleBtn.disabled = false;
        } else {
            battleBtn.innerHTML = '<span class="btn-icon">‚ö°</span>SAVA≈û!';
            // YENƒ∞ KURAL: 3 birim + EN AZ 1 b√ºy√º kartƒ± gerekli (HAZIRLANMASI ZORUNLU)
            const hasRequiredUnits = gameState.playerBattleCards.length === 3;
            const hasRequiredSpells = gameState.playerSpellCards.length >= 1;
            battleBtn.disabled = !hasRequiredUnits || !hasRequiredSpells || gameState.battleInProgress;
            
            // Kullanƒ±cƒ±ya bilgi ver
            if (!hasRequiredUnits && !hasRequiredSpells) {
                battleBtn.textContent = '‚ùå 3 Bƒ∞Rƒ∞M + 1 B√úY√ú HAZIRLA!';
            } else if (!hasRequiredUnits) {
                battleBtn.textContent = '‚ùå 3 Bƒ∞Rƒ∞M KART GEREK!';
            } else if (!hasRequiredSpells) {
                battleBtn.textContent = '‚ùå 1 B√úY√ú KART HAZIRLA!';
            } else {
                battleBtn.innerHTML = '<span class="btn-icon">‚ö°</span>SAVA≈û!';
            }
        }
        buyCardBtn.disabled = gameState.gold < 10;
        
        // B√ºy√º butonu kontrol√º - SADECE B√úY√ú A≈ûAMASINDA G√ñSTER
        if (useSpellBtn) {
            if (gameState.spellPhase && !gameState.battleInProgress && gameState.playerSpellCards.length > 0) {
                useSpellBtn.style.display = 'flex';
                useSpellBtn.disabled = false;
                useSpellBtn.textContent = `üîÆ ${gameState.playerSpellCards[0].name} KULLAN?`;
            } else {
                useSpellBtn.style.display = 'none';
                useSpellBtn.disabled = true;
            }
        }
        
        // Bot kartƒ± kontrol et - bot kartlarƒ± biterse oyunu kazan
        if (gameState.botCards.length === 0 && gameState.botBattleCards.length === 0) {
            setTimeout(() => {
                showGameOver('üèÜ OYUNU KAZANDIN!', 'T√ºm bot kartlarƒ±nƒ± yendin! M√ºkemmel!');
            }, 1000);
        }
    });
}

// Optimize edilmi≈ü kart rendering
function renderCards(cards, container, isDraggable) {
    // Fragment kullanarak DOM manip√ºlasyonunu optimize et
    const fragment = document.createDocumentFragment();
    
    // Sadece deƒüi≈üiklik varsa render et
    if (container.children.length !== cards.length) {
        container.innerHTML = '';
        
        cards.forEach(card => {
            const cardElement = createCardElement(card, isDraggable);
            fragment.appendChild(cardElement);
        });
        
        container.appendChild(fragment);
    }
}

// Bot kartlarƒ±na targeting feedback ekle
function renderBotCardsWithTargeting() {
    if (gameState.targetingMode) {
        // Bot battle cards i√ßin targeting sƒ±nƒ±fƒ± ekle
        document.querySelectorAll('#botBattleCards .card').forEach(cardElement => {
            cardElement.classList.add('targeting-available');
            cardElement.style.cursor = 'crosshair';
        });
    } else {
        // Targeting sƒ±nƒ±fƒ±nƒ± kaldƒ±r
        document.querySelectorAll('#botBattleCards .card').forEach(cardElement => {
            cardElement.classList.remove('targeting-available');
            cardElement.style.cursor = 'default';
        });
    }
}

// GELƒ∞≈ûTƒ∞Rƒ∞LMƒ∞≈û G√ñRSEL Sƒ∞STEMƒ∞ - SADECE PNG DESTEƒûI
function createCardElement(card, isDraggable) {
    const cardDiv = document.createElement('div');
    cardDiv.className = `card ${card.cssClass} ${!isDraggable ? 'bot-card' : ''}`;
    cardDiv.draggable = isDraggable;
    cardDiv.dataset.cardId = card.id;
    
    // Kartƒ±n can durumuna g√∂re g√∂rsel durum (sadece birim kartlar i√ßin)
    let healthClass = '';
    if (!card.isSpell && card.currentHealth && card.maxHealth) {
        const healthPercentage = (card.currentHealth / card.maxHealth) * 100;
        if (healthPercentage <= 25) healthClass = 'critical-health';
        else if (healthPercentage <= 50) healthClass = 'low-health';
    }
    
    // G√ñRSEL TAM OTURTMA Sƒ∞STEMƒ∞ - PNG VE SVG DESTEƒûƒ∞
    const imagePath = `images/${card.image}`;
    const isImage = card.image && (card.image.endsWith('.png') || card.image.endsWith('.jpg'));
    const isSvg = card.image && card.image.endsWith('.svg');
    
    let cardImageContent;
    if (isImage) {
        cardImageContent = `<img src="${imagePath}" alt="${card.name}" class="card-img" style="display:block;" onload="this.style.display='block'; this.nextElementSibling.style.display='none';" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                           <div class="fallback-icon" style="display:none;">${card.icon}</div>`;
    } else if (isSvg) {
        cardImageContent = `<object data="${imagePath}" type="image/svg+xml" class="card-img card-svg" style="display:block;" onload="this.style.display='block'; this.nextElementSibling.style.display='none';" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"></object>
                           <div class="fallback-icon" style="display:none;">${card.icon}</div>`;
    } else {
        cardImageContent = `<div class="fallback-icon">${card.icon}</div>`;
    }
    
    cardDiv.innerHTML = `
        <div class="card-type">${card.type}</div>
        <div class="card-image ${healthClass}">
            ${cardImageContent}
        </div>
        <div class="card-name">${card.name}</div>
        <div class="card-stats">
            ${card.isSpell ? 
                `<span class="spell-stat">üîÆ ${card.spellValue} Hasar</span>` :
                `<span class="attack-stat">‚öîÔ∏è${card.attack}</span>
                 <span class="defense-stat">üõ°Ô∏è${card.defense}</span>
                 <span class="health-stat ${healthClass}">‚ù§Ô∏è${card.currentHealth}/${card.maxHealth}</span>`
            }
        </div>
        <div class="card-description">${card.description}</div>
    `;
    
    if (isDraggable) {
        setupDragAndDrop(cardDiv);
    }
    
    // Bot kartlarƒ± i√ßin hedef se√ßim event (sadece targeting mode'da ve sava≈ü ortasƒ±nda deƒüil)
    if (!isDraggable && !card.isSpell) {
        cardDiv.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            console.log('Bot kartƒ±na tƒ±klandƒ±:', card.name, 'Targeting:', gameState.targetingMode);
            
            if (gameState.targetingMode && !gameState.battleInProgress) {
                addLog(`üéØ ${card.name} hedef se√ßildi!`, 'win');
                applySpellToTarget(card);
            } else if (!gameState.targetingMode) {
                addLog('‚ùå √ñnce b√ºy√º kartƒ±nƒ±za tƒ±klayƒ±n!', 'error');
            } else if (gameState.battleInProgress) {
                addLog('‚ùå Sava≈ü ortasƒ±nda hedef se√ßilemez!', 'error');
            }
        });
    }
    
    return cardDiv;
}

// Sava≈ü kartlarƒ±nƒ± render et
function renderBattleCards() {
    const playerFragment = document.createDocumentFragment();
    const botFragment = document.createDocumentFragment();
    
    playerBattleCardsContainer.innerHTML = '';
    botBattleCardsContainer.innerHTML = '';
    
    gameState.playerBattleCards.forEach(card => {
        const cardElement = createCardElement(card, false);
        playerFragment.appendChild(cardElement);
    });
    
    gameState.botBattleCards.forEach(card => {
        const cardElement = createCardElement(card, false);
        botFragment.appendChild(cardElement);
    });
    
    playerBattleCardsContainer.appendChild(playerFragment);
    botBattleCardsContainer.appendChild(botFragment);
}

// B√ºy√º kartlarƒ±nƒ± render et - SIFIRDAN YENƒ∞ Sƒ∞STEM
function renderSpellCards() {
    const playerSpellFragment = document.createDocumentFragment();
    const botSpellFragment = document.createDocumentFragment();
    
    playerSpellCardsContainer.innerHTML = '';
    botSpellCardsContainer.innerHTML = '';
    
    gameState.playerSpellCards.forEach(card => {
        const cardElement = createCardElement(card, true);
        cardElement.classList.add('spell-in-area');
        
        // YENƒ∞ B√úY√ú Sƒ∞STEMƒ∞ - Basit ve √ßalƒ±≈üƒ±r
        cardElement.onclick = function() {
            useSpellOnRandomEnemy(card);
        };
        
        // G√∂rsel
        cardElement.style.cursor = 'pointer';
        cardElement.style.border = '5px solid #00ff00';
        cardElement.title = 'Tƒ±kla = 10 hasar!';
        
        playerSpellFragment.appendChild(cardElement);
    });
    
    gameState.botSpellCards.forEach(card => {
        const cardElement = createCardElement(card, false);
        cardElement.classList.add('spell-in-area');
        botSpellFragment.appendChild(cardElement);
    });
    
    playerSpellCardsContainer.appendChild(playerSpellFragment);
    botSpellCardsContainer.appendChild(botSpellFragment);
}

// YENƒ∞ B√úY√ú FONKSƒ∞YONU - Her ≈üey burada
function useSpellOnRandomEnemy(spellCard) {
    console.log('B√úY√ú KULLANIMI BA≈ûLADI - Kart ID:', spellCard.id);
    
    // 1. D√º≈üman kontrol√º
    if (!gameState.botBattleCards || gameState.botBattleCards.length === 0) {
        alert('D√º≈üman kartƒ± yok!');
        return;
    }
    
    // 2. Rastgele d√º≈üman se√ß
    const enemyIndex = Math.floor(Math.random() * gameState.botBattleCards.length);
    const targetEnemy = gameState.botBattleCards[enemyIndex];
    
    console.log('Hedef d√º≈üman:', targetEnemy.name, 'ID:', targetEnemy.id, 'Can:', targetEnemy.currentHealth);
    
    // 3. Hasar uygula
    const damage = 10;
    const oldHealth = targetEnemy.currentHealth;
    targetEnemy.currentHealth = targetEnemy.currentHealth - damage;
    
    console.log('Hasar uygulandƒ±:', oldHealth, '->', targetEnemy.currentHealth);
    
    // 4. Alert
    alert(`B√ºy√º kullanƒ±ldƒ±!\n${targetEnemy.name} ${damage} hasar aldƒ±!\nYeni can: ${targetEnemy.currentHealth}`);
    
    // 5. √ñl√º kart kontrol√º
    if (targetEnemy.currentHealth <= 0) {
        alert(targetEnemy.name + ' √∂ld√º!');
        // Sadece ID ile kaldƒ±r
        const beforeCount = gameState.botBattleCards.length;
        gameState.botBattleCards = gameState.botBattleCards.filter(c => c.id !== targetEnemy.id);
        console.log('Kart kaldƒ±rƒ±ldƒ±. √ñnceki sayƒ±:', beforeCount, 'Yeni sayƒ±:', gameState.botBattleCards.length);
    }
    
    // 6. B√ºy√º kartƒ±nƒ± kaldƒ±r - EN √ñNEMLƒ∞ Kƒ∞SIM!
    console.log('B√ºy√º kartƒ± kaldƒ±rƒ±lƒ±yor. ID:', spellCard.id);
    const beforeSpellCount = gameState.playerSpellCards.length;
    gameState.playerSpellCards = gameState.playerSpellCards.filter(c => c.id !== spellCard.id);
    const afterSpellCount = gameState.playerSpellCards.length;
    console.log('B√ºy√º kart sayƒ±sƒ±:', beforeSpellCount, '->', afterSpellCount);
    
    // 7. UI g√ºncelle
    updateUI();
    
    console.log('B√úY√ú KULLANIMI TAMAM');
}

// Drag and Drop kurulumu
function setupDragAndDrop(cardElement) {
    cardElement.addEventListener('dragstart', (e) => {
        e.dataTransfer.setData('text/plain', cardElement.dataset.cardId);
        cardElement.classList.add('dragging');
    });
    
    cardElement.addEventListener('dragend', () => {
        cardElement.classList.remove('dragging');
    });
}

// KART SAVA≈û ALANINA YERLE≈ûTƒ∞RME - YENƒ∞ RANDOMƒ∞ZE Sƒ∞STEM
function placeCardInBattlefield(originalCard, isBotCard = false) {
    console.log('üìã KART SAVA≈û ALANINA YERLE≈ûTƒ∞Rƒ∞Lƒ∞YOR:', originalCard.name, 'OrijinalID:', originalCard.id);
    
    // TAM YENƒ∞ KART OLU≈ûTUR - SIFIRDAN!
    const battlefieldCard = {
        // YENƒ∞ BENZERSƒ∞Z SAVA≈û ALANI ID'Sƒ∞
        id: `battle_${Date.now()}_${Math.random().toString(36).substr(2, 12)}_${isBotCard ? 'bot' : 'player'}`,
        
        // ORƒ∞Jƒ∞NAL VERƒ∞LERƒ∞ KOPYALA (DEƒûƒ∞≈ûMEZ)
        name: String(originalCard.name),
        type: String(originalCard.type),
        attack: Number(originalCard.attack),
        defense: Number(originalCard.defense),
        icon: String(originalCard.icon),
        image: String(originalCard.image),
        description: String(originalCard.description),
        cssClass: String(originalCard.cssClass),
        isSpell: Boolean(originalCard.isSpell),
        spellType: originalCard.spellType ? String(originalCard.spellType) : undefined,
        spellValue: originalCard.spellValue ? Number(originalCard.spellValue) : undefined,
        
        // CAN Sƒ∞STEMƒ∞ - SAVA≈û ALANINA √ñZEL
        currentHealth: Number(originalCard.currentHealth || originalCard.defense),
        maxHealth: Number(originalCard.maxHealth || originalCard.defense),
        
        // SAVA≈û ALANI √ñZEL VERƒ∞LER
        _battlefieldStamp: `${Date.now()}_${Math.random()}_battlefield`,
        _originalId: originalCard.id, // Referans i√ßin sakla
        _placedAt: Date.now(),
        _battlePosition: isBotCard ? 'bot-side' : 'player-side'
    };
    
    console.log('‚öîÔ∏è YENƒ∞ SAVA≈û KARTI OLU≈ûTURULDU:', {
        name: battlefieldCard.name,
        battleId: battlefieldCard.id,
        originalId: battlefieldCard._originalId,
        health: battlefieldCard.currentHealth,
        battleStamp: battlefieldCard._battlefieldStamp
    });
    
    return battlefieldCard;
}

// OYUNCU KART YERLE≈ûTƒ∞RME Sƒ∞STEMƒ∞ - B√úY√ú A≈ûAMASI KORUMASI
function handlePlayerCardDrop(cardId) {
    const originalCard = gameState.playerCards.find(c => c.id === cardId);
    if (!originalCard) {
        addLog('‚ùå Kart bulunamadƒ±!', 'error');
        return;
    }
    
    if (originalCard.isSpell) {
        // B√úY√ú A≈ûAMASI KORUMASI - YENƒ∞ B√úY√ú YERLE≈ûTIRME ENGELƒ∞
        if (gameState.spellPhase) {
            addLog('‚ùå B√ºy√º a≈üamasƒ±nda yeni b√ºy√º kartƒ± yerle≈ütirilemez!', 'error');
            addLog('‚ö° Sadece √∂nceden hazƒ±rladƒ±ƒüƒ±n b√ºy√ºleri kullanabilirsin!', 'info');
            return;
        }
        
        // B√úY√ú KARTI - √ñN HAZIRLIK ALANI (Sadece normal zamanda)
        if (gameState.playerSpellCards.length < 1) {
            // Orijinal kartƒ± elden kaldƒ±r
            gameState.playerCards = gameState.playerCards.filter(c => c.id !== cardId);
            
            // YENƒ∞ REFERANSLA B√úY√ú ALANINA EKLE
            const spellCard = placeCardInBattlefield(originalCard, false);
            gameState.playerSpellCards.push(spellCard);
            
            playSound('cardPlace');
            addLog(`‚ú® ${spellCard.name} √∂n hazƒ±rlƒ±k alanƒ±na yerle≈ütirildi!`, 'info');
            addLog(`üÜî Yeni Battle ID: ${spellCard.id.substr(0, 15)}...`, 'info');
        } else {
            addLog('‚ùå Sadece 1 b√ºy√º kartƒ± hazƒ±rlayabilirsin!', 'error');
        }
    } else {
        // Bƒ∞Rƒ∞M KARTI KORUMASI - Sava≈ü ba≈üladƒ±ysa yerle≈ütirme engelli
        if (gameState.battleInProgress) {
            addLog('‚ùå Sava≈ü ba≈üladƒ±ktan sonra yeni birim kartƒ± yerle≈ütirilemez!', 'error');
            return;
        }
        
        // Bƒ∞Rƒ∞M KARTI - SAVA≈û ALANI (Sadece sava≈ü √∂ncesi)
        if (gameState.playerBattleCards.length < 3) {
            // Orijinal kartƒ± elden kaldƒ±r
            gameState.playerCards = gameState.playerCards.filter(c => c.id !== cardId);
            
            // YENƒ∞ REFERANSLA SAVA≈û ALANINA EKLE
            const battleCard = placeCardInBattlefield(originalCard, false);
            gameState.playerBattleCards.push(battleCard);
            
            playSound('cardPlace');
            addLog(`‚ú® ${battleCard.name} arena alanƒ±na yerle≈ütirildi!`, 'info');
            addLog(`üÜî Yeni Battle ID: ${battleCard.id.substr(0, 15)}...`, 'info');
        } else {
            addLog('‚ùå Sadece 3 birim kartƒ± yerle≈ütirebilirsin!', 'error');
        }
    }
    
    updateUI();
}
function startBattle() {
    // G√úNCELLENEN KONTROLLER - 3 birim + 1 b√ºy√º √∂n hazƒ±rlƒ±k ZORUNLU
    if (gameState.playerBattleCards.length !== 3) {
        addLog('‚ùå 3 birim kartƒ±nƒ± arena alanƒ±na s√ºr√ºklemelisin!', 'error');
        return;
    }
    
    if (gameState.playerSpellCards.length < 1) {
        addLog('‚ùå En az 1 b√ºy√º kartƒ±nƒ± √∂n hazƒ±rlƒ±k olarak s√ºr√ºklemelisin!', 'error');
        return;
    }
    
    if (gameState.botCards.length === 0) {
        addLog('üèÜ Bot kartlarƒ± bitti! Oyunu kazandƒ±n!', 'win');
        setTimeout(() => {
            showGameOver('üèÜ OYUNU KAZANDIN!', 'T√ºm bot kartlarƒ±nƒ± yendin!');
        }, 1000);
        return;
    }
    
    gameState.battleInProgress = true;
    arena.classList.add('battle-active');
    
    // Bot kartlarƒ± se√ß (sadece mevcut kartlardan)
    prepareBotCards();
    
    updateUI();
    playSound('battle');
    addLog('‚öîÔ∏è Kartlar hazƒ±rlandƒ±! B√ºy√º a≈üamasƒ± ba≈ülƒ±yor...', 'battle');
    addLog('üîÆ √ñNCEDENKƒ∞ STRATEJƒ∞N: Hazƒ±rladƒ±ƒüƒ±n b√ºy√ºy√º ≈üimdi kullanacak mƒ±sƒ±n?', 'info');
    addLog('üí° ƒ∞pucu: B√ºy√º kullanmak zorunda deƒüilsin, stratejik karar ver!', 'win');
    
    // B√ºy√º a≈üamasƒ±nƒ± ba≈ülat
    setTimeout(() => {
        startSpellPhase();
    }, 1000);
}

// Bot kartlarƒ±nƒ± hazƒ±rla - YENƒ∞ RANDOMƒ∞ZE Sƒ∞STEM
function prepareBotCards() {
    console.log('ü§ñ BOT KARTLARI HAZIRLANIRKEN YENƒ∞ REF VERƒ∞Lƒ∞YOR...');
    
    // Bot birim kartlarƒ± se√ß ve SAVA≈û ALANINA YENƒ∞ REF ƒ∞LE YERLE≈ûTƒ∞R
    const botUnitCards = gameState.botCards.filter(card => !card.isSpell);
    for (let i = 0; i < 3 && botUnitCards.length > 0; i++) {
        const randomIndex = Math.floor(Math.random() * botUnitCards.length);
        const originalBotCard = botUnitCards[randomIndex];
        
        // Orijinal kartƒ± bot elinden kaldƒ±r
        gameState.botCards = gameState.botCards.filter(c => c.id !== originalBotCard.id);
        
        // YENƒ∞ REFERANSLA SAVA≈û ALANINA EKLE
        const battleBotCard = placeCardInBattlefield(originalBotCard, true);
        gameState.botBattleCards.push(battleBotCard);
        
        console.log(`ü§ñ Bot kart ${i+1}:`, {
            name: battleBotCard.name,
            originalId: originalBotCard.id.substr(0, 8),
            battleId: battleBotCard.id.substr(0, 8),
            health: battleBotCard.currentHealth
        });
        
        // Kullanƒ±lan kartƒ± listeden √ßƒ±kar
        botUnitCards.splice(randomIndex, 1);
    }
    
    // Bot b√ºy√º kartƒ± se√ß (varsa) ve YENƒ∞ REF VER
    const botSpellCards = gameState.botCards.filter(card => card.isSpell);
    if (botSpellCards.length > 0 && Math.random() < 0.7) {
        const originalSpell = botSpellCards[Math.floor(Math.random() * botSpellCards.length)];
        
        // Orijinal b√ºy√º kartƒ±nƒ± bot elinden kaldƒ±r
        gameState.botCards = gameState.botCards.filter(c => c.id !== originalSpell.id);
        
        // YENƒ∞ REFERANSLA B√úY√ú ALANINA EKLE
        const battleSpell = placeCardInBattlefield(originalSpell, true);
        gameState.botSpellCards.push(battleSpell);
        
        console.log('ü§ñ Bot b√ºy√º:', {
            name: battleSpell.name,
            originalId: originalSpell.id.substr(0, 8),
            battleId: battleSpell.id.substr(0, 8),
            spellValue: battleSpell.spellValue
        });
    }
    
    console.log('‚úÖ BOT KARTLARI HAZIR - T√úM√ú YENƒ∞ REF ƒ∞LE!');
}

// B√ºy√º a≈üamasƒ±nƒ± ba≈ülat
function startSpellPhase() {
    gameState.spellPhase = true;
    gameState.spellTimer = 20;
    
    // B√ºy√º a≈üamasƒ± g√∂rsel efektini aktifle≈ütir
    document.body.classList.add('spell-phase');
    
    addLog('üîÆ B√úY√ú A≈ûAMASI! √ñnceden hazƒ±rladƒ±ƒüƒ±nƒ±z b√ºy√ºleri kullanma zamanƒ±!', 'info');
    addLog('‚ö° B√ºy√º kullanmak zorunlu deƒüil - sadece se√ßim yapƒ±n!', 'info');
    
    // G√úNCELLENEN STRATEJƒ∞: B√ºy√º KULLANMAK opsiyonel, HAZIRLAMAK zorunlu
    if (gameState.playerSpellCards.length === 0) {
        addLog('‚ö†Ô∏è Hi√ß b√ºy√º hazƒ±rlamamƒ±≈üdƒ±nƒ±z! Bu duruma d√º≈ümemeliydiniz.', 'error');
    } else {
        addLog(`‚ú® ${gameState.playerSpellCards.length} b√ºy√º kartƒ±nƒ±z hazƒ±r! ƒ∞sterseniz kullanƒ±n, istemezseniz sava≈üa ge√ßin.`, 'win');
    }
    
    // Timer ba≈ülat
    const spellInterval = setInterval(() => {
        gameState.spellTimer--;
        updateUI();
        
        if (gameState.spellTimer <= 0) {
            clearInterval(spellInterval);
            endSpellPhase();
        }
    }, 1000);
    
    // Bot b√ºy√º kullanƒ±mƒ± (rastgele 5-15 saniye arasƒ±)
    if (gameState.botSpellCards.length > 0) {
        const botSpellDelay = Math.random() * 10000 + 5000; // 5-15 saniye
        setTimeout(() => {
            if (gameState.spellPhase) {
                useBotSpell();
            }
        }, botSpellDelay);
    }
    
    updateUI();
}

// Bot b√ºy√º kullanƒ±mƒ± - YENƒ∞ Sƒ∞STEM
function useBotSpell() {
    if (gameState.botSpellCards.length === 0 || gameState.playerBattleCards.length === 0) return;
    
    const spell = gameState.botSpellCards[0];
    
    // Rastgele oyuncu kartƒ± se√ß
    const targetIndex = Math.floor(Math.random() * gameState.playerBattleCards.length);
    const targetCard = gameState.playerBattleCards[targetIndex];
    
    console.log('BOT B√úY√ú:', spell.name, 'Hedef:', targetCard.name, 'ID:', targetCard.id);
    
    // Hasar uygula
    const oldHealth = targetCard.currentHealth;
    targetCard.currentHealth = targetCard.currentHealth - spell.spellValue;
    
    addLog(`üî• Bot ${spell.name} kullandƒ±! ${targetCard.name} ${spell.spellValue} hasar aldƒ±!`, 'battle');
    
    // √ñl√º kontrol√º
    if (targetCard.currentHealth <= 0) {
        addLog(`üíÄ ${targetCard.name} bot b√ºy√ºs√º ile √∂ld√º!`, 'lose');
        gameState.playerBattleCards = gameState.playerBattleCards.filter(c => c.id !== targetCard.id);
    }
    
    // Bot b√ºy√º kartƒ±nƒ± temizle
    gameState.botSpellCards = [];
    
    playSound('battle');
    updateUI();
}

// RASTGELE D√ú≈ûMAN HASAR Sƒ∞STEMƒ∞ - Basit ve √ßalƒ±≈üƒ±r!
function useSpellDirectly(spell) {
    if (gameState.botBattleCards.length === 0) {
        addLog('‚ùå D√º≈üman kartƒ± yok!', 'error');
        return;
    }
    
    // Rastgele bir d√º≈üman kartƒ± se√ß
    const targetCard = gameState.botBattleCards[Math.floor(Math.random() * gameState.botBattleCards.length)];
    const oldHealth = targetCard.currentHealth;
    
    // Hasar uygula
    targetCard.currentHealth -= spell.spellValue;
    
    addLog(`‚ú® ${spell.name} kullandƒ±n! RASTGELE HEDEF: ${targetCard.name}`, 'win');
    addLog(`üí• ${targetCard.name} ${spell.spellValue} hasar aldƒ±! (${oldHealth} ‚Üí ${targetCard.currentHealth})`, 'info');
    
    // Kart √∂ld√º m√º kontrol et
    if (targetCard.currentHealth <= 0) {
        addLog(`üíÄ ${targetCard.name} √∂ld√º!`, 'win');
        gameState.botBattleCards = gameState.botBattleCards.filter(c => c.id !== targetCard.id);
    }
    
    // B√ºy√º kartƒ±nƒ± kullanƒ±ldƒ± olarak i≈üaretle (b√ºy√º alanƒ±ndan kaldƒ±r)
    gameState.playerSpellCards = gameState.playerSpellCards.filter(c => c.id !== spell.id);
    
    // Ses efekti ve UI g√ºncelle
    playSound('battle');
    updateUI();
    
    addLog('‚úÖ B√ºy√º ba≈üarƒ±yla kullanƒ±ldƒ±!', 'win');
}

// B√ºy√º uygula ve hedef se√ßimi bitir
function applySpellToTarget(targetCard) {
    if (!gameState.targetingMode || !gameState.selectedSpell) {
        addLog('‚ùå Hedef se√ßim modu aktif deƒüil!', 'error');
        return;
    }
    
    const spell = gameState.selectedSpell;
    
    // B√ºy√º hasar uygula
    if (spell.spellType === 'damage') {
        const oldHealth = targetCard.currentHealth;
        targetCard.currentHealth -= spell.spellValue;
        
        addLog(`‚ú® ${spell.name} kullandƒ±n! ${targetCard.name} ${spell.spellValue} hasar aldƒ±!`, 'win');
        addLog(`üíî ${targetCard.name} canƒ±: ${oldHealth} ‚Üí ${targetCard.currentHealth}`, 'info');
        
        if (targetCard.currentHealth <= 0) {
            addLog(`üíÄ ${targetCard.name} b√ºy√ºnle √∂ld√º!`, 'win');
            // √ñl√º kartƒ± bot sava≈ü alanƒ±ndan kaldƒ±r
            gameState.botBattleCards = gameState.botBattleCards.filter(c => c.id !== targetCard.id);
        }
    }
    
    // B√ºy√º kartƒ±nƒ± kullanƒ±ldƒ± olarak i≈üaretle (b√ºy√º alanƒ±ndan kaldƒ±r)
    gameState.playerSpellCards = gameState.playerSpellCards.filter(c => c.id !== spell.id);
    
    // Hedef se√ßim modunu kapat
    gameState.targetingMode = false;
    gameState.selectedSpell = null;
    document.body.classList.remove('targeting-mode');
    
    // Ses efekti
    playSound('battle');
    
    // UI g√ºncelle
    updateUI();
    
    addLog('‚úÖ B√ºy√º ba≈üarƒ±yla uygulandƒ±!', 'win');
}

// Hedef se√ßimi iptal etme
function cancelTargeting() {
    if (!gameState.targetingMode) return;
    
    gameState.targetingMode = false;
    gameState.selectedSpell = null;
    document.body.classList.remove('targeting-mode');
    
    addLog('‚ùå Hedef se√ßimi iptal edildi.', 'info');
    updateUI();
}

// B√ºy√º a≈üamasƒ±nƒ± bitir
function endSpellPhase() {
    gameState.spellPhase = false;
    gameState.spellTimer = 0;
    
    // Hedef se√ßim modunu da temizle
    gameState.targetingMode = false;
    gameState.selectedSpell = null;
    document.body.classList.remove('targeting-mode');
    
    // B√ºy√º a≈üamasƒ± g√∂rsel efektini kaldƒ±r
    document.body.classList.remove('spell-phase');
    
    // Kullanƒ±lmamƒ±≈ü b√ºy√ºleri geri g√∂nder - KULLANMAMAYI SE√áEN OYUNCU ƒ∞√áƒ∞N
    gameState.playerCards.push(...gameState.playerSpellCards);
    gameState.botCards.push(...gameState.botSpellCards);
    gameState.playerSpellCards = [];
    gameState.botSpellCards = [];
    
    if (gameState.playerSpellCards.length > 0) {
        addLog('‚öîÔ∏è B√ºy√º kullanmamayƒ± se√ßtiniz! Sava≈ü ba≈ülƒ±yor!', 'battle');
    } else {
        addLog('‚öîÔ∏è B√ºy√º a≈üamasƒ± bitti! Sava≈ü ba≈ülƒ±yor!', 'battle');
    }
    
    setTimeout(() => {
        executeBattleWithAnimations();
    }, 1000);
    
    updateUI();
}

// Optimize edilmi≈ü animasyonlu sava≈ü
async function executeBattleWithAnimations() {
    if (isAnimating) return; // √áoklu animasyon engelle
    isAnimating = true;
    
    // Sava≈ü ortasƒ±nda targeting mode'u temizle
    if (gameState.targetingMode) {
        cancelTargeting();
    }
    
    addLog('üî• === SAVA≈û BA≈ûLADI ===', 'battle');
    
    let playerWins = 0;
    let botWins = 0;
    
    try {
        // Her kart √ßiftini sƒ±rayla kar≈üƒ±la≈ütƒ±r
        for (let i = 0; i < Math.min(gameState.playerBattleCards.length, gameState.botBattleCards.length); i++) {
            const playerCard = gameState.playerBattleCards[i];
            const botCard = gameState.botBattleCards[i];
            
            addLog(`‚ö° ${playerCard.name} vs ${botCard.name}`, 'battle');
            
            // Optimize edilmi≈ü animasyon
            await playOptimizedBattleAnimation(playerCard, botCard, i);
            
            // Sava≈ü hesaplamasƒ± (daha dengeli)
            const playerDamage = Math.max(1, playerCard.attack - Math.floor(botCard.defense * 0.25) + Math.floor(Math.random() * 10));
            const botDamage = Math.max(1, botCard.attack - Math.floor(playerCard.defense * 0.25) + Math.floor(Math.random() * 10));
            
            // Hasar uygula
            botCard.currentHealth -= playerDamage;
            playerCard.currentHealth -= botDamage;
            
            addLog(`üí• ${playerCard.name} ${playerDamage} hasar verdi!`, 'info');
            addLog(`üí• ${botCard.name} ${botDamage} hasar verdi!`, 'info');
            
            // Kartlarƒ±n durumunu kontrol et
            if (botCard.currentHealth <= 0) {
                addLog(`üíÄ ${botCard.name} √∂ld√º!`, 'win');
                playerWins++;
                playSound('win');
            }
            
            if (playerCard.currentHealth <= 0) {
                addLog(`üíÄ ${playerCard.name} √∂ld√º!`, 'lose');
                botWins++;
                playSound('lose');
            }
            
            // UI g√ºncelle
            updateUI();
            
            // Sonraki sava≈ü i√ßin bekle (optimize edilmi≈ü)
            await new Promise(resolve => setTimeout(resolve, Math.max(500, 1500 / settings.animationSpeed)));
        }
        
        // √ñl√º kartlarƒ± kaldƒ±r - ID BAZLI Fƒ∞LTRELEME
        console.log('SAVA≈û √ñNCE PLAYER KARTLAR:', gameState.playerBattleCards.map(c => `${c.name}(${c.id.substr(0,3)}) Can:${c.currentHealth}`));
        console.log('SAVA≈û √ñNCE BOT KARTLAR:', gameState.botBattleCards.map(c => `${c.name}(${c.id.substr(0,3)}) Can:${c.currentHealth}`));
        
        gameState.playerBattleCards = gameState.playerBattleCards.filter(card => card.currentHealth > 0);
        gameState.botBattleCards = gameState.botBattleCards.filter(card => card.currentHealth > 0);
        
        console.log('SAVA≈û SONRA PLAYER KARTLAR:', gameState.playerBattleCards.map(c => `${c.name}(${c.id.substr(0,3)}) Can:${c.currentHealth}`));
        console.log('SAVA≈û SONRA BOT KARTLAR:', gameState.botBattleCards.map(c => `${c.name}(${c.id.substr(0,3)}) Can:${c.currentHealth}`));
        
        // Yaralƒ± kartlarƒ± ellere geri g√∂nder
        gameState.playerCards.push(...gameState.playerBattleCards);
        gameState.botCards.push(...gameState.botBattleCards);
        
        // Sava≈ü alanƒ±nƒ± temizle
        gameState.playerBattleCards = [];
        gameState.botBattleCards = [];
        arena.classList.remove('battle-active');
        
        // Sonucu deƒüerlendir
        setTimeout(() => {
            evaluateBattleResult(playerWins, botWins);
        }, 500);
        
    } finally {
        isAnimating = false;
    }
}

// Optimize edilmi≈ü sava≈ü animasyonu
async function playOptimizedBattleAnimation(playerCard, botCard, index) {
    const playerCardElements = document.querySelectorAll('#playerBattleCards .card');
    const botCardElements = document.querySelectorAll('#botBattleCards .card');
    
    if (playerCardElements[index] && botCardElements[index]) {
        const playerElement = playerCardElements[index];
        const botElement = botCardElements[index];
        
        // Optimize edilmi≈ü animasyon - GPU acceleration
        playerElement.style.willChange = 'transform, filter';
        botElement.style.willChange = 'transform, filter';
        
        // Saldƒ±rƒ± animasyonu
        playerElement.classList.add('attack-animation');
        botElement.classList.add('attack-animation');
        
        // Optimize edilmi≈ü sava≈ü efektleri
        createOptimizedBattleEffects();
        
        await new Promise(resolve => setTimeout(resolve, Math.max(400, 800 / settings.animationSpeed)));
        
        // Vuru≈ü animasyonu
        playerElement.classList.add('hit-animation');
        botElement.classList.add('hit-animation');
        
        await new Promise(resolve => setTimeout(resolve, Math.max(300, 600 / settings.animationSpeed)));
        
        // Animasyonlarƒ± temizle ve will-change'i kaldƒ±r
        playerElement.classList.remove('attack-animation', 'hit-animation');
        botElement.classList.remove('attack-animation', 'hit-animation');
        playerElement.style.willChange = 'auto';
        botElement.style.willChange = 'auto';
    }
}

// Optimize edilmi≈ü sava≈ü efektleri
function createOptimizedBattleEffects() {
    const effectsContainer = document.getElementById('battleEffects');
    if (!effectsContainer) return;
    
    const effects = ['‚ö°', 'üí•', 'üî•'];
    const maxEffects = 3; // Performans i√ßin sƒ±nƒ±rla
    
    for (let i = 0; i < maxEffects; i++) {
        const effect = document.createElement('div');
        effect.textContent = effects[Math.floor(Math.random() * effects.length)];
        effect.style.cssText = `
            position: absolute;
            font-size: 2rem;
            left: ${Math.random() * 60 + 20}px;
            top: ${Math.random() * 60 + 20}px;
            animation: optimizedExplode ${Math.max(0.5, 1 / settings.animationSpeed)}s ease-out forwards;
            pointer-events: none;
            will-change: transform, opacity;
        `;
        
        effectsContainer.appendChild(effect);
        
        // Performans i√ßin element'i hƒ±zlƒ±ca kaldƒ±r
        setTimeout(() => {
            if (effect.parentNode) {
                effect.parentNode.removeChild(effect);
            }
        }, Math.max(500, 1000 / settings.animationSpeed));
    }
}

// Sava≈ü sonucunu deƒüerlendir
function evaluateBattleResult(playerWins, botWins) {
    if (playerWins > botWins) {
        // Oyuncu kazandƒ±
        gameState.gold += 50;
        gameState.score += 100;
        addLog('üèÜ KAZANDIN! +50 altƒ±n kazandƒ±n!', 'win');
        playSound('win');
    } else if (botWins > playerWins) {
        // Bot kazandƒ±
        gameState.gold = Math.max(0, gameState.gold - 20);
        gameState.health -= 20;
        addLog('üíî KAYBETTƒ∞N! -20 altƒ±n, -20 can kaybettin!', 'lose');
        playSound('lose');
    } else {
        // Berabere
        addLog('ü§ù BERABERE! Kimse altƒ±n kazanmadƒ±.', 'info');
    }
    
    gameState.battleInProgress = false;
    updateUI();
    checkGameOver();
}

// Kart satƒ±n al
function buyCard() {
    if (gameState.gold >= 10) {
        gameState.gold -= 10;
        const newCard = createRandomCard();
        gameState.playerCards.push(newCard);
        playSound('cardPlace');
        addLog(`üõí Yeni kart satƒ±n alƒ±ndƒ±: ${newCard.name}`, 'info');
        updateUI();
    }
}

// Oyun biti≈üini kontrol et
function checkGameOver() {
    if (gameState.health <= 0) {
        showGameOver('üíÄ Oyunu Kaybettin!', 'Canƒ±n bitti! Daha dikkatli ol.');
    } else if (gameState.playerCards.length === 0 && gameState.gold < 10) {
        showGameOver('üí∏ Oyunu Kaybettin!', 'Kartƒ±n ve altƒ±nƒ±n kalmadƒ±!');
    }
}

// Oyun bitti popup
function showGameOver(title, message) {
    document.getElementById('gameOverTitle').textContent = title;
    document.getElementById('gameOverMessage').textContent = message;
    gameOverPopup.style.display = 'flex';
    
    if (title.includes('KAZANDIN')) {
        playSound('win');
    } else {
        playSound('lose');
    }
}

// Oyunu yeniden ba≈ülat
function restartGame() {
    gameOverPopup.style.display = 'none';
    initGame();
}

// Optimize edilmi≈ü log ekleme
function addLog(message, type = 'info') {
    // Performans i√ßin requestAnimationFrame kullan
    requestAnimationFrame(() => {
        const logEntry = document.createElement('div');
        logEntry.className = `log-entry ${type}`;
        const time = new Date().toLocaleTimeString();
        logEntry.textContent = `${time}: ${message}`;
        
        logContent.appendChild(logEntry);
        logContent.scrollTop = logContent.scrollHeight;
        
        // Eski loglarƒ± temizle (performans i√ßin)
        if (logContent.children.length > 30) {
            logContent.removeChild(logContent.firstChild);
        }
    });
}

// Sayfa yenileme/kapanma √∂ncesi temizlik
window.addEventListener('beforeunload', () => {
    if (animationFrameId) {
        cancelAnimationFrame(animationFrameId);
    }
});

// ========== YENƒ∞ TEMƒ∞Z B√úY√ú Sƒ∞STEMƒ∞ ==========

// B√ºy√º kartlarƒ±nƒ± render et - SIFIRDAN TEMƒ∞Z
function renderCleanSpellCards() {
    const playerSpellFragment = document.createDocumentFragment();
    const botSpellFragment = document.createDocumentFragment();
    
    playerSpellCardsContainer.innerHTML = '';
    botSpellCardsContainer.innerHTML = '';
    
    gameState.playerSpellCards.forEach(spellCard => {
        const cardElement = createCardElement(spellCard, true);
        cardElement.classList.add('spell-in-area');
        
        // TEMƒ∞Z B√úY√ú Sƒ∞STEMƒ∞ - Tek tƒ±kla kullan ve yok ol
        cardElement.onclick = function() {
            useCleanSpell(spellCard);
        };
        
        // G√∂rsel - Parlak ye≈üil kenarlƒ±k
        cardElement.style.cursor = 'pointer';
        cardElement.style.border = '4px solid #00ff00';
        cardElement.style.boxShadow = '0 0 15px #00ff00';
        cardElement.title = 'Tƒ±kla: Rastgele d√º≈ümana 10 hasar!';
        
        playerSpellFragment.appendChild(cardElement);
    });
    
    gameState.botSpellCards.forEach(spellCard => {
        const cardElement = createCardElement(spellCard, false);
        cardElement.classList.add('spell-in-area');
        botSpellFragment.appendChild(cardElement);
    });
    
    playerSpellCardsContainer.appendChild(playerSpellFragment);
    botSpellCardsContainer.appendChild(botSpellFragment);
}

// G√úVENLƒ∞ B√úY√ú KULLANIM FONKSƒ∞YONU
function useSpellSafely(targetSpell) {
    console.log('üîÆ ===== G√úVENLƒ∞ B√úY√ú KULLANIMI BA≈ûLADI =====');
    console.log('Hedef B√ºy√º:', {
        name: targetSpell.name,
        id: targetSpell.id,
        spellValue: targetSpell.spellValue,
        uniqueStamp: targetSpell._uniqueStamp
    });
    
    // B√úY√ú A≈ûAMASI KONTROL√ú
    if (!gameState.spellPhase) {
        alert('‚ùå B√ºy√º a≈üamasƒ±nda deƒüil!');
        console.log('‚ùå B√ºy√º a≈üamasƒ± aktif deƒüil');
        return;
    }
    
    // D√ú≈ûMAN KONTROL√ú
    if (!gameState.botBattleCards || gameState.botBattleCards.length === 0) {
        alert('‚ùå D√º≈üman kartƒ± yok!');
        console.log('‚ùå Bot battle kartlarƒ± mevcut deƒüil');
        return;
    }
    
    // B√úY√ú KARTINI OYUNCU ELƒ∞NDE DOƒûRULA
    const spellExists = gameState.playerSpellCards.find(spell => spell.id === targetSpell.id);
    if (!spellExists) {
        alert('‚ùå Bu b√ºy√º kartƒ± artƒ±k mevcut deƒüil!');
        console.log('‚ùå B√ºy√º kartƒ± bulunamadƒ±:', targetSpell.id);
        return;
    }
    
    console.log('‚úÖ T√ºm kontroller ge√ßildi, b√ºy√º uygulanƒ±yor...');
    
    // RASTGELE D√ú≈ûMAN SE√á - TAM G√úVENLƒ∞
    const availableEnemies = gameState.botBattleCards.filter(enemy => enemy.currentHealth > 0);
    if (availableEnemies.length === 0) {
        alert('‚ùå Canlƒ± d√º≈üman kalmadƒ±!');
        return;
    }
    
    const randomIndex = Math.floor(Math.random() * availableEnemies.length);
    const selectedEnemy = availableEnemies[randomIndex];
    
    console.log('üéØ Se√ßilen d√º≈üman:', {
        name: selectedEnemy.name,
        id: selectedEnemy.id,
        currentHealth: selectedEnemy.currentHealth,
        maxHealth: selectedEnemy.maxHealth,
        uniqueStamp: selectedEnemy._uniqueStamp
    });
    
    // HASAR UYGULA - SADECE BU D√ú≈ûMANA
    const damage = targetSpell.spellValue;
    const oldHealth = selectedEnemy.currentHealth;
    
    // Dƒ∞REKT HASAR UYGULAMA - REF SORUNLARINI √ñNLE
    for (let i = 0; i < gameState.botBattleCards.length; i++) {
        if (gameState.botBattleCards[i].id === selectedEnemy.id) {
            gameState.botBattleCards[i].currentHealth = Math.max(0, gameState.botBattleCards[i].currentHealth - damage);
            console.log(`üí• Hasar uygulandƒ± [${i}]:`, oldHealth, '->', gameState.botBattleCards[i].currentHealth);
            break;
        }
    }
    
    // √ñL√ú D√ú≈ûMAN KONTROL√ú VE KALDIRMA
    if (selectedEnemy.currentHealth <= 0) {
        console.log('üíÄ D√º≈üman √∂ld√º, kaldƒ±rƒ±lƒ±yor...');
        const beforeCount = gameState.botBattleCards.length;
        gameState.botBattleCards = gameState.botBattleCards.filter(enemy => enemy.id !== selectedEnemy.id);
        const afterCount = gameState.botBattleCards.length;
        console.log(`üóëÔ∏è Bot kartlarƒ±: ${beforeCount} -> ${afterCount}`);
    }
    
    // B√úY√ú KARTINI KALDIRMA - G√úVENLƒ∞
    console.log('üóëÔ∏è B√ºy√º kartƒ± kaldƒ±rƒ±lƒ±yor...');
    const beforeSpellCount = gameState.playerSpellCards.length;
    gameState.playerSpellCards = gameState.playerSpellCards.filter(spell => spell.id !== targetSpell.id);
    const afterSpellCount = gameState.playerSpellCards.length;
    console.log(`üìú B√ºy√º kartlarƒ±: ${beforeSpellCount} -> ${afterSpellCount}`);
    
    // UI G√úNCELLEMESƒ∞
    updateUI();
    
    // BA≈ûARI MESAJI
    const healthDisplay = selectedEnemy.currentHealth <= 0 ? '√ñLD√ú' : `${selectedEnemy.currentHealth}`;
    addLog(`üîÆ ${targetSpell.name} kullanƒ±ldƒ±!`, 'win');
    addLog(`üéØ Hedef: ${selectedEnemy.name}`, 'info');
    addLog(`üí• ${damage} hasar! (${oldHealth} ‚Üí ${healthDisplay})`, 'battle');
    
    if (selectedEnemy.currentHealth <= 0) {
        addLog(`üíÄ ${selectedEnemy.name} b√ºy√ºyle √∂ld√º!`, 'win');
    }
    
    console.log('‚úÖ ===== B√úY√ú KULLANIMI TAMAM =====');
}
